{"version":3,"sources":["Solver.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ops","l","r","str","val","toNumberList","rawValues","trim","split","map","Number","add","App","useState","rawCards","setRawCards","rawNumbers","setRawNumbers","solutions","setSolutions","onChangeInput","e","target","name","value","style","color","href","className","onSubmit","preventDefault","sols","cards","numbers","sort","called","search","paths","step","stack","ints","key","join","length","matchCards","slice","remaining","filter","int","matchCard","indexOf","splice","alreadyFound","some","solution","every","idx","push","i","left","localInts","j","right","op","opResult","concat","unshift","console","log","findSolutions","a","b","reduce","NaN","type","onChange","JSON","stringify","sol","onClick","ogCards","diff","remain","match","SolutionItem","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PACMA,G,KAAM,CACV,SAACC,EAAWC,GAAZ,MAA2B,CACzBC,IAAI,GAAD,OAAKF,EAAL,cAAYC,GAAKE,IAAKH,EAAIC,IAE/B,SAACD,EAAWC,GAAZ,MAA2B,CACzBC,IAAI,GAAD,OAAKF,EAAL,cAAYC,GAAKE,IAAKH,EAAIC,IAE/B,SAACD,EAAWC,GAAZ,MAA2B,CACzBC,IAAI,GAAD,OAAKD,EAAL,cAAYD,GAAKG,IAAKF,EAAID,IAE/B,SAACA,EAAWC,GAAZ,MAA2B,CACzBC,IAAI,GAAD,OAAKF,EAAL,cAAYC,GAAKE,IAAKH,EAAIC,MCR3BG,EAAe,SAACC,GAAD,OACnBA,EAAUC,OAAOC,MAAM,UAAUC,IAAIC,SAEjCC,EAAM,SAACV,EAAWC,GAAZ,OAA0BD,EAAIC,GA4G3BU,EAtEO,WAAO,IAAD,EACMC,mBAAS,oBADf,mBACnBC,EADmB,KACTC,EADS,OAEUF,mBAAS,uBAFnB,mBAEnBG,EAFmB,KAEPC,EAFO,OAGQJ,mBAAsB,IAH9B,mBAGnBK,EAHmB,KAGRC,EAHQ,KAKpBC,EAAsD,SAACC,GAAO,IAAD,EACzCA,EAAEC,OAAlBC,EADyD,EACzDA,KAAMC,EADmD,EACnDA,MACd,OAAQD,GACN,IAAK,QACHR,EAAYS,GACZ,MACF,IAAK,UACHP,EAAcO,KA0BpB,OACE,oCACE,gCACE,iDACA,4BACE,4BACE,uBAAGC,MAAO,CAAEC,MAAO,WAAaC,KAAK,0BAArC,iBAIN,0BAAMC,UAAU,OAAOC,SA7ByB,SAACR,GACnDA,EAAES,iBACF,IAAMC,EDhDmB,SAACC,EAAiBC,GAC7CD,EAAQA,EAAME,OACdD,EAAUA,EAAQC,OAElB,IAAIC,EAAS,EACTC,EAAS,EACPC,EAAsC,GACtCnB,EAAyB,GAsD/B,OApDa,SAAPoB,EAAQC,EAAiBC,KAAyC,yDACtEL,IAEA,IAAMM,GADND,EAAOA,EAAKN,QACKQ,KAAK,KAEtB,KAAID,KAAOJ,GAAX,CACA,GADqCA,EAAMI,IAAO,EAC9CD,EAAKG,QAAUX,EAAMW,OAAQ,CAE/B,IAAMC,EAAaZ,EAAMa,QACnBC,EAAYN,EAAKO,OAAO,SAACC,GAC7B,IAAMC,EAAYL,EAAWM,QAAQF,GAErC,OADIC,GAAa,GAAKL,EAAWO,OAAOF,EAAW,GAC5CA,EAAY,IAIrB,GAAyB,IAArBH,EAAUH,OAAc,CAC1B,IAAMS,EAAelC,EAAUmC,KAAK,SAACC,GACnC,OAAIA,EAASd,KAAKG,SAAWH,EAAKG,QAC3BW,EAASd,KAAKe,MAAM,SAACP,EAAKQ,GAAN,OAAcR,IAAQR,EAAKgB,OAGxD,YADKJ,GAAgBlC,EAAUuC,KAAK,CAAElB,QAAOC,WAMjD,GAAoB,IAAhBA,EAAKG,OAAT,CAEAP,IAGA,IAAK,IAAIsB,EAAI,EAAGA,EAAIlB,EAAKG,OAAQe,IAAK,CACpC,IAAMC,EAAOnB,EAAKkB,GACZE,EAAYpB,EAAKK,QACvBe,EAAUT,OAAOO,EAAG,GACpB,IAAK,IAAIG,EAAIH,EAAGG,EAAID,EAAUjB,OAAQkB,IAAK,CAGzC,IAFA,IAAMC,EAAQF,EAAUT,OAAOU,EAAG,GAAG,GAErC,MAAiB7D,EAAjB,eAAsB,CAAjB,IAAM+D,EAAE,KACLC,EAAWD,EAAGJ,EAAMG,GAC1BxB,EAAKC,EAAM0B,OAAOD,EAAS7D,KAAMyD,EAAUK,OAAOD,EAAS5D,MAE7DwD,EAAUM,QAAQJ,GAEpBF,EAAUM,QAAQP,MAItBrB,CAAK,GAAIL,GAETkC,QAAQC,IAAR,uBAA4BpC,EAA5B,mBAA4CC,EAA5C,sBAAiEE,EAAjE,sBAAqFC,EAArF,WACOlB,ECbQmD,CAAchE,EAAaS,GAAWT,EAAaW,IAChEe,EAAKG,KAAK,SAACoC,EAAGC,GACZ,IAAMtE,EAAIsE,EAAE/B,KAAKG,OAAS2B,EAAE9B,KAAKG,OACjC,OAAU,IAAN1C,EACKsE,EAAE/B,KAAKgC,OAAO7D,GAAO2D,EAAE9B,KAAKgC,OAAO7D,GAErCV,IAEW,IAAhB8B,EAAKY,QACPZ,EAAK0B,KAAK,CACRjB,KAAM,CAACiC,KACPlC,MAAO,CAAC,gBAGZpB,EAAaY,KAcT,2BAAOH,UAAU,SAAjB,SAEE,2BAAO8C,KAAK,OAAOnD,KAAK,QAAQC,MAAOV,EAAU6D,SAAUvD,IAC1DN,EAAW,8BAAO8D,KAAKC,UAAUxE,EAAaS,KAAqB,sCAEtE,2BAAOc,UAAU,SAAjB,WAEE,2BAAO8C,KAAK,OAAOnD,KAAK,UAAUC,MAAOR,EAAY2D,SAAUvD,IAC9DJ,EAAa,8BAAO4D,KAAKC,UAAUxE,EAAaW,KAAuB,sCAE1E,2BAAO0D,KAAK,SAASlD,MAAM,WAE5BN,EAAUyB,OAAS,GAAK,6BACvB,wCAAczB,EAAUyB,OAAxB,KACCzB,EAAUT,IAAI,SAACqE,GAAD,OA5FmB,SAAC,GAA4E,IAA1EA,EAAyE,EAAzEA,IAAKhE,EAAoE,EAApEA,SAAUC,EAA0D,EAA1DA,YAAaE,EAA6C,EAA7CA,cAAeE,EAA8B,EAA9BA,aAoBhFsB,EAAMmC,KAAKC,UAAUC,EAAItC,MAC/B,OAAO,yBAAKC,IAAKA,GACf,4BAAKA,EAAL,IAAU,4BAAQsC,QArBwC,SAAC1D,GAC3DA,EAAES,iBAGF,IAAMkD,EAAU3E,EAAaS,GACvBmE,EAAOH,EAAItC,KAAKK,QAChBqC,EAASF,EAAQjC,OAAO,SAACW,GAC7B,IAAMyB,EAAQF,EAAK/B,QAAQQ,GAI3B,OAHIyB,GAAS,GACXF,EAAK9B,OAAOgC,EAAO,GAEdA,EAAQ,IAEjBpE,EAAYmE,EAAOxC,KAAK,OAExBvB,EAAa,CAAC2D,IACd7D,EAAc,MAKJ,UACV,4BACG6D,EAAIvC,MAAM9B,IAAI,SAAC6B,GAAD,OAAU,wBAAIG,IAAKH,GAAOA,OAoEf8C,CAAa,CAAEN,MAAKhE,WAAUC,cAAaE,gBAAeE,sB,MC/FtEkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCbNM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.2928b2d2.chunk.js","sourcesContent":["\nconst ops = [\n  (l: number, r: number) => ({\n    str: `${l} + ${r}`, val: l + r,\n  }),\n  (l: number, r: number) => ({\n    str: `${l} - ${r}`, val: l - r,\n  }),\n  (l: number, r: number) => ({\n    str: `${r} - ${l}`, val: r - l,\n  }),\n  (l: number, r: number) => ({\n    str: `${l} * ${r}`, val: l * r,\n  }),\n];\n\nexport interface ISolution { stack: string[]; ints: number[]; }\n\nexport const findSolutions = (cards: number[], numbers: number[]): ISolution[] => {\n  cards = cards.sort();\n  numbers = numbers.sort();\n\n  let called = 0;\n  let search = 0;\n  const paths: { [index: string]: boolean } = {};\n  const solutions: ISolution[] = [];\n\n  const step = (stack: string[], ints: number[], init: boolean = true) => {\n    called++;\n    ints = ints.sort();\n    const key = ints.join(\"|\");\n\n    if (key in paths) { return; } else { paths[key] = true; }\n    if (ints.length <= cards.length) {\n      // check of all of our ints uniquely match our cards\n      const matchCards = cards.slice();\n      const remaining = ints.filter((int) => {\n        const matchCard = matchCards.indexOf(int);\n        if (matchCard >= 0) { matchCards.splice(matchCard, 1); }\n        return matchCard < 0;\n      });\n\n      // all ints matched, solution found\n      if (remaining.length === 0) {\n        const alreadyFound = solutions.some((solution) => {\n          if (solution.ints.length !== ints.length) { return false; }\n          return solution.ints.every((int, idx) => int === ints[idx]);\n        });\n        if (!alreadyFound) { solutions.push({ stack, ints }); }\n        return;\n      }\n    }\n\n    // check edge case of one number mismatch\n    if (ints.length === 1) { return; }\n\n    search++;\n\n    // pull two numbers out, apply possible operations\n    for (let i = 0; i < ints.length; i++) {\n      const left = ints[i];\n      const localInts = ints.slice();\n      localInts.splice(i, 1);\n      for (let j = i; j < localInts.length; j++) {\n        const right = localInts.splice(j, 1)[0];\n\n        for (const op of ops) {\n          const opResult = op(left, right);\n          step(stack.concat(opResult.str), localInts.concat(opResult.val));\n        }\n        localInts.unshift(right);\n      }\n      localInts.unshift(left);\n    }\n  };\n\n  step([], numbers);\n  // tslint:disable-next-line: no-console\n  console.log(`Given cards [${cards}] ints [${numbers}], stepped ${called}, searched ${search} times`);\n  return solutions;\n};\n","import React, { ChangeEventHandler, FormEventHandler, MouseEventHandler, useState } from \"react\";\nimport \"./App.css\";\nimport { findSolutions, ISolution } from \"./Solver\";\n\nconst toNumberList = (rawValues: string): number[] => (\n  rawValues.trim().split(/[\\s,]+/).map(Number)\n);\nconst add = (l: number, r: number) => l + r;\n\ninterface ISolProps {\n  sol: ISolution;\n  rawCards: string;\n  setRawCards: React.Dispatch<React.SetStateAction<string>>;\n  setRawNumbers: React.Dispatch<React.SetStateAction<string>>;\n  setSolutions: React.Dispatch<React.SetStateAction<ISolution[]>>;\n}\nconst SolutionItem: React.FC<ISolProps> = ({ sol, rawCards, setRawCards, setRawNumbers, setSolutions }: ISolProps) => {\n  const applySolution: MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n\n    // apply the difference\n    const ogCards = toNumberList(rawCards);\n    const diff = sol.ints.slice();\n    const remain = ogCards.filter((i) => {\n      const match = diff.indexOf(i);\n      if (match >= 0) {\n        diff.splice(match, 1);\n      }\n      return match < 0;\n    });\n    setRawCards(remain.join(\", \"));\n\n    setSolutions([sol]);\n    setRawNumbers(\"\");\n  };\n\n  const key = JSON.stringify(sol.ints);\n  return <div key={key}>\n    <h3>{key} <button onClick={applySolution}>apply</button></h3>\n    <ul>\n      {sol.stack.map((step) => <li key={step}>{step}</li>)}\n    </ul>\n  </div>;\n};\n\nconst App: React.FC = () => {\n  const [rawCards, setRawCards] = useState(\"17, 6, 2, 35, 50\");\n  const [rawNumbers, setRawNumbers] = useState(\"3, 4, 2, 7, 8, 4, 1\");\n  const [solutions, setSolutions] = useState<ISolution[]>([]);\n\n  const onChangeInput: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"cards\":\n        setRawCards(value);\n        break;\n      case \"numbers\":\n        setRawNumbers(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    const sols = findSolutions(toNumberList(rawCards), toNumberList(rawNumbers));\n    sols.sort((a, b) => {\n      const l = b.ints.length - a.ints.length;\n      if (l === 0) {\n        return b.ints.reduce(add) - a.ints.reduce(add);\n      }\n      return l;\n    });\n    if (sols.length === 0) {\n      sols.push({\n        ints: [NaN],\n        stack: [\"impossible\"],\n      });\n    }\n    setSolutions(sols);\n  };\n\n  return (\n    <>\n      <header>\n        <h1>Calculords Solver</h1>\n        <ul>\n          <li>\n            <a style={{ color: \"#ffffff\" }} href=\"http://calculords.com/\">Calculords</a>\n          </li>\n        </ul>\n      </header>\n      <form className=\"form\" onSubmit={onSubmit}>\n        <label className=\"label\">\n          Cards:\n          <input type=\"text\" name=\"cards\" value={rawCards} onChange={onChangeInput} />\n          {rawCards ? <code>{JSON.stringify(toNumberList(rawCards))}</code> : <code>nil</code>}\n        </label>\n        <label className=\"label\">\n          Numbers:\n          <input type=\"text\" name=\"numbers\" value={rawNumbers} onChange={onChangeInput} />\n          {rawNumbers ? <code>{JSON.stringify(toNumberList(rawNumbers))}</code> : <code>nil</code>}\n        </label>\n        <input type=\"submit\" value=\"solve\" />\n      </form>\n      {solutions.length > 0 && <div>\n        <h2>Results ({solutions.length})</h2>\n        {solutions.map((sol) => SolutionItem({ sol, rawCards, setRawCards, setRawNumbers, setSolutions }))}\n      </div>\n      }\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n// tslint:disable: no-console\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}